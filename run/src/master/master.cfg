# -*- python -*-
# ex: set filetype=python:

import json
import os

from buildbot.plugins import *

from wpt_chunked_step import WPTChunkedStep
from wpt_detect_complete_step import WptDetectCompleteStep
from wpt_run_step import WptRunStep
import temp_dir

workers = None
with open('workers.json') as handle:
    workers = json.load(handle)
workernames = [w['name'] for w in workers]

platform_manifest = None
with open('browsers.json') as handle:
    platform_manifest = json.load(handle)

c = BuildmasterConfig = {}

configuration_file_dir = os.path.join(
    os.path.dirname(os.path.abspath(__file__)), 'configuration'
)

def read_configuration_file(filename):
    with open(os.path.join(configuration_file_dir, filename)) as handle:
        return handle.read()

c['secretsProviders'] = [
    secrets.SecretInAFile(dirname=configuration_file_dir)
]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.LocalWorker('buildmaster'),
  ] + [worker.Worker(w['name'], w['password']) for w in workers]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = [
    changes.GitPoller('git://github.com/w3c/web-platform-tests.git',
                      workdir='gitpoller-workdir',
                      branch='master',
                      pollAtLaunch=True,
                      pollinterval=300)
]

c['schedulers'] = [
  schedulers.Triggerable(name='chunked',
                         builderNames=['Chunked Runner']),
  schedulers.Triggerable(name='upload',
                         builderNames=['Uploader']),
  schedulers.Nightly(name='nightly',
                     builderNames=['Daily Initiator'],
                     hour=[0, 12])
]

trigger_factory = util.BuildFactory([
    # Fetch the latest version of `master` prior to triggering chunked runs.
    # This ensures that the all chunks use the same revision of WPT (by setting
    # the Buildbot property named `revision`), including when builds are
    # menually re-tried via the web interface.
    steps.Git(repourl='git://github.com/w3c/web-platform-tests'),
    WPTChunkedStep(schedulerNames=['chunked'],
                   platform_manifest=platform_manifest,
                   total_chunks=10)
])

chunk_result_dir_name = util.Interpolate('/'.join([
    '..', 'chunk-results', '%(prop:revision)s', '%(prop:browser_name)s'
]))
chunk_result_file_name = util.Interpolate('/'.join([
    '..', 'chunk-results', '%(prop:revision)s', '%(prop:browser_name)s',
    '%(prop:this_chunk)s_of_%(prop:total_chunks)s.json'
]))
chunked_factory = util.BuildFactory([
    steps.Git(repourl='git://github.com/w3c/web-platform-tests'),
    temp_dir.CreateStep(name='Create temporary directory'),
    steps.SetPropertyFromCommand(name='Collect the required hosts',
                                 property='hosts_contents',
                                 command=['./wpt', 'make-hosts-file']),
    steps.ShellCommand(name='Set the required hosts file',
                       command=['sudo', 'extend-hosts.py', '/etc/hosts'],
                       initialStdin=util.Property('hosts_contents'),
                       haltOnFailure=True),
    steps.SetProperties(properties={
                            'log_wptreport': temp_dir.prefix('report.json'),
                            'log_raw': temp_dir.prefix('log-raw.txt')
                       }),
    # In the context of the WPT Dashboard, the correctness/completeness of a
    # given web browser does not dictate the success ofa build. Successful
    # builds will usually include failed Web Platform Tests.
    WptRunStep(flunkOnFailure=False),
    steps.ShellCommand(name='Validate results',
                       command=['validate-wpt-results.py',
                                '--log-wptreport', util.Property('log_wptreport'),
                                '--log-raw', util.Property('log_raw')],
                       haltOnFailure=True),
    steps.MasterShellCommand(name='Create results directory on build master',
                             command=['mkdir', '-p', chunk_result_dir_name]),
    steps.FileUpload(name='Upload results to build master',
                     workersrc=temp_dir.prefix('report.json'),
                     masterdest=chunk_result_file_name),
    temp_dir.RemoveStep(name='Clean up', alwaysRun=True),
    steps.ShellCommand(name='Remove browser profile files',
                       command='find /tmp -maxdepth 1 -type f -name \'*mozrunner\' -exec rm -f {} + -print; find /tmp -maxdepth 1 -type f -name \'*hromium*\' -exec rm -f {} + -print; find /tmp -maxdepth 1 -type f -name \'*hrome*\' -exec rm -rf {} + -print',
                       alwaysRun=True),
    WptDetectCompleteStep(name='Trigger upload to Google Cloud Platform',
                          schedulerNames=['upload'],
                          set_properties={
                              'browser_name': util.Property('browser_name')
                          })
])

upload_factory = util.BuildFactory([
    steps.MasterShellCommand(name='Upload results to Google Cloud Platform',
                             command=[
                                 'upload-wpt-results.py',
                                 '--raw-results-directory', chunk_result_dir_name,
                                 '--browser-name', util.Property('browser_name'),
                                 '--wpt-revision', util.Property('revision'),
                                 '--bucket-name', 'wptd2'
                             ])
])

c['builders'] = [
    util.BuilderConfig(name='Chunked Runner',
                       workernames=workernames,
                       factory=chunked_factory),
    util.BuilderConfig(name='Daily Initiator',
                       workernames=['buildmaster'],
                       factory=trigger_factory),
    # This Builder only concerns data that is available on the Build Master
    # machine, so there is no need to occupy a dedicated worker to perform it.
    util.BuilderConfig(name='Uploader',
                       workernames=['buildmaster'],
                       factory=upload_factory)
]

# Do not collapse jobs
# https://github.com/buildbot/buildbot/issues/3472
c['collapseRequests'] = False

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Web Platform Tests Dashboard'
c['titleURL'] = 'https://wpt.fyi'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = 'http://%s/' % read_configuration_file('fqdn')

c['www'] = {
    'port': 80,
    'plugins': {
        'waterfall_view': {},
        'console_view': {},
        'grid_view': {}
    },
    'auth': util.GitHubAuth(
        read_configuration_file('oauth_github_client_id'),
        read_configuration_file('oauth_github_client_secret')
    ),
    'authz': util.Authz(
        stringsMatcher = util.reStrMatcher,
        allowRules=[
            util.AnyControlEndpointMatcher(
                role=read_configuration_file('oauth_github_org_pattern')
            )
        ],
        roleMatchers=[util.RolesFromGroups()]
    )
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
