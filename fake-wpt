#!/usr/bin/env python

import argparse
import json
import os
import sys
import time

class FileOrStreamCtx(object):
    def __init__(self, name, mode):
        self.name = name
        self.mode = mode

    def __enter__(self):
        if self.name == '-':
            return sys.stdout

        self.handle = open(self.name, self.mode)
        return self.handle

    def __exit__(self, *args):
        if self.name == '-':
            return

        self.handle.__exit__(*args)


def make_hosts_file(args):
    print '127.0.0.1 zombo.com'

def run(args):
    tests = [
        '/fake-test-for-chunk-%s-of-%s.html' % (args.this_chunk, args.total_chunks)
    ]

    raw_log = {
        'action': 'suite_start',
        'tests': {
            'default': tests
        }
    }
    wpt_report = {
        'results': [
            {
                'test': test_file_name,
                'status': 'OK',
                'subtests': []
            } for test_file_name in tests
        ]
    }

    with FileOrStreamCtx(args.log_raw, 'w') as handle:
        handle.write(json.dumps(raw_log))

    with FileOrStreamCtx(args.log_wptreport, 'w') as handle:
        handle.write(json.dumps(wpt_report))

    with FileOrStreamCtx(args.log_tbpl, 'w') as handle:
        handle.write('This is some TBPL-formatted logging\nWoooo\n')

    if args.sauce_tunnel_id:
        with open('/tmp/sc-%s.log' % args.sauce_tunnel_id, 'a') as handle:
            handle.write('This is some output\n')
            handle.write('From Sauce Connect\n')
            handle.write('Tunnel id: %s\n' % args.sauce_tunnel_id)

    time.sleep(5)

    with FileOrStreamCtx(args.log_tbpl, 'a') as handle:
        handle.write('All done.\n')

    if args.sauce_tunnel_id:
        with open('/tmp/sc-%s.log' % args.sauce_tunnel_id, 'a') as handle:
            handle.write('End of output for Sauce Connect')

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()

hosts_parser = subparsers.add_parser('make-hosts-file')
hosts_parser.set_defaults(func=make_hosts_file)

run_parser = subparsers.add_parser('run')
run_parser.add_argument('--log-wptreport', action='store')
run_parser.add_argument('--log-raw', action='store')
run_parser.add_argument('--log-tbpl', action='store')
run_parser.add_argument('--this-chunk', action='store')
run_parser.add_argument('--total-chunks', action='store')
run_parser.add_argument('--sauce-tunnel-id', action='store')
run_parser.set_defaults(func=run)

if __name__ == '__main__':
    args = parser.parse_known_args()
    args[0].func(args[0])
