# -*- python -*-
# ex: set filetype=python:

import json
import os

from buildbot.plugins import *

from wpt_chunked_step import WPTChunkedStep

workers = None
here = os.path.abspath(__file__)
with open(os.path.join(os.path.dirname(here), 'workers.json')) as handle:
    workers = json.load(handle)
workernames = [w['name'] for w in workers]

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker(w['name'], w['password']) for w in workers]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/w3c/web-platform-tests.git',
        workdir='gitpoller-workdir',
        branch='master',
        pollAtLaunch=True,
        pollinterval=300))

c['schedulers'] = [
  schedulers.Triggerable(name='chunked',
                         builderNames=['chunked_run']),
  schedulers.Nightly(name='nightly',
                                builderNames=['initiate_chunked_run'],
                                minute='*')
]

trigger_factory = util.BuildFactory([
  # Fetch the latest version of `master` prior to triggering chunked runs. This
  # ensures that the all chunks use the same revision of WPT (by setting the
  # Buildbot property named `revision`), including when builds are menually
  # re-tried via the web interface.
  steps.Git(repourl='git://github.com/w3c/web-platform-tests'),
  WPTChunkedStep(schedulerNames=['chunked'], browsers=['firefox', 'chrome'], total_chunks=5)
])


from twisted.python import log
from twisted.internet import defer
class WptUpload(steps.ShellCommand):
    def __init__(self, browser, revision, total_chunks, *args, **kwargs):
        self.browserProp = browser
        self.revisionProp = revision
        self.total_chunksProp = total_chunks

        kwargs['doStepIf'] = self.allResultsPresent

        super(WptUpload, self).__init__(*args, **kwargs)

    @defer.inlineCallbacks
    def allResultsPresent(self, step):
        import os
        browser = yield self.browserProp.getRenderingFor(self.build.properties)
        revision = yield self.revisionProp.getRenderingFor(self.build.properties)
        total_chunks = yield self.total_chunksProp.getRenderingFor(self.build.properties)
        chunk_results_dir = os.path.sep.join([
            os.path.abspath(os.path.dirname(__file__)),
            '..',
            'chunk-results',
            revision,
            browser
        ])
        actual = set(os.listdir(chunk_results_dir))
        expected = set(
          ['%s_of_%s.json' % (idx, total_chunks) for idx in range(1, total_chunks + 1)]
        )
        defer.returnValue(len(expected - actual) ==  0)

    def start(self):
        self.setCommand([
            'echo', 'upload-wpt-results', '--browser', self.browserProp,
            '--revision', self.revisionProp
        ])

        return super(WptUpload, self).start()

wptRunCmd = [
  'echo', 'wpt', 'run', '--this-chunk', util.Property('this_chunk'),
  '--total-chunks', util.Property('total_chunks'), util.Property('browser')
]
chunked_factory = util.BuildFactory([
  steps.Git(repourl='git://github.com/w3c/web-platform-tests'),
  steps.ShellCommand(name='wpt', command=wptRunCmd),
  steps.MasterShellCommand(name='Create results directory', command=['mkdir', '-p', util.Interpolate('../chunk-results/%(prop:got_revision)s/%(prop:browser)s')]),
  steps.ShellCommand(name='Make fake results',
                     command=['touch', util.Interpolate('../%(prop:this_chunk)s_of_%(prop:total_chunks)s.json')]),
  steps.FileUpload(name='Upload results to master',
                   workersrc=util.Interpolate('../%(prop:this_chunk)s_of_%(prop:total_chunks)s.json'),
                   masterdest=util.Interpolate('../chunk-results/%(prop:got_revision)s/%(prop:browser)s/%(prop:this_chunk)s_of_%(prop:total_chunks)s.json')),
  WptUpload(name='Trigger upload to Google Cloud Platform',
            browser=util.Property('browser'),
            revision=util.Property('got_revision'),
            total_chunks=util.Property('total_chunks'))
])

c['builders'] = [
  util.BuilderConfig(name='chunked_run', workernames=workernames, factory=chunked_factory),
  util.BuilderConfig(name='initiate_chunked_run', workernames=workernames, factory=trigger_factory)
]

# Do not collapse jobs
# https://github.com/buildbot/buildbot/issues/3472
c['collapseRequests'] = False

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Web Platform Tests Dashboard'
c['titleURL'] = 'https://wpt.fyi'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = 'http://localhost:8090/'

# minimalistic config to activate new web UI
c['www'] = dict(port=80,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
