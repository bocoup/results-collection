# -*- python -*-
# ex: set filetype=python:

import json
import os

from buildbot.plugins import *

from wpt_chunked_step import WPTChunkedStep
from wpt_detect_complete_step import WptDetectCompleteStep
import temp_dir

workers = None
here = os.path.abspath(__file__)
with open(os.path.join(os.path.dirname(here), 'workers.json')) as handle:
    workers = json.load(handle)
workernames = [w['name'] for w in workers]

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker(w['name'], w['password']) for w in workers]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = [
    changes.GitPoller('git://github.com/w3c/web-platform-tests.git',
                      workdir='gitpoller-workdir',
                      branch='master',
                      pollAtLaunch=True,
                      pollinterval=300)
]

c['schedulers'] = [
  schedulers.Triggerable(name='chunked',
                         builderNames=['Chunked Runner']),
  schedulers.Triggerable(name='upload',
                         builderNames=['Uploader']),
  schedulers.Nightly(name='nightly',
                     builderNames=['Daily Initiator'],
                     minute='*')
]

trigger_factory = util.BuildFactory([
    # Fetch the latest version of `master` prior to triggering chunked runs.
    # This ensures that the all chunks use the same revision of WPT (by setting
    # the Buildbot property named `revision`), including when builds are
    # menually re-tried via the web interface.
    steps.Git(repourl='git://github.com/w3c/web-platform-tests'),
    WPTChunkedStep(schedulerNames=['chunked'],
                   browsers=['firefox', 'chrome'],
                   total_chunks=5)
])

wptRunCmd = [
    'echo', 'wpt', 'run',
    '--this-chunk', util.Property('this_chunk'),
    '--total-chunks', util.Property('total_chunks'),
    '--log-wptreport', temp_dir.prefix('report.json'),
    util.Property('browser')
]
chunk_result_dir_name = util.Interpolate('/'.join([
    '..', 'chunk-results', '%(prop:got_revision)s', '%(prop:browser)s'
]))
chunk_result_file_name = util.Interpolate('/'.join([
    '..', 'chunk-results', '%(prop:got_revision)s', '%(prop:browser)s',
    '%(prop:this_chunk)s_of_%(prop:total_chunks)s.json'
]))
chunked_factory = util.BuildFactory([
    steps.Git(repourl='git://github.com/w3c/web-platform-tests'),
    temp_dir.CreateStep(name='Create temporary directory'),
    steps.ShellCommand(name='wpt', command=wptRunCmd),
    steps.MasterShellCommand(name='Create results directory on build master',
                             command=['mkdir', '-p', chunk_result_dir_name]),
    steps.ShellCommand(name='Make fake results',
                       command=['touch', temp_dir.prefix('report.json')]),
    #steps.ShellCommand(name='Sometimesfail',
    #                   haltOnFailure=True,
    #                   command=['python', '-c' 'import random; import sys; sys.exit(1 if random.random() > 0.9 else 0)']),
    steps.FileUpload(name='Upload results to build master',
                     workersrc=temp_dir.prefix('report.json'),
                     masterdest=chunk_result_file_name),
    temp_dir.RemoveStep(name='Clean up', alwaysRun=True),
    WptDetectCompleteStep(name='Trigger upload to Google Cloud Platform',
                          schedulerNames=['upload'],
                          set_properties={
                              'browser': util.Property('browser'),
                              'total_chunks': util.Property('total_chunks')
                          })
])

upload_factory = util.BuildFactory([
    steps.MasterShellCommand(name='Upload results to Google Cloud Platform',
                             command=[
                                 'echo', 'upload-wpt-results',
                                 '--browser', util.Property('browser'),
                                 '--revision', util.Property('revision')
                             ])
])

c['builders'] = [
    util.BuilderConfig(name='Chunked Runner',
                       workernames=workernames,
                       factory=chunked_factory),
    util.BuilderConfig(name='Daily Initiator',
                       workernames=workernames,
                       factory=trigger_factory),
    util.BuilderConfig(name='Uploader',
                       workernames=workernames,
                       factory=upload_factory)
]

# Do not collapse jobs
# https://github.com/buildbot/buildbot/issues/3472
c['collapseRequests'] = False

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Web Platform Tests Dashboard'
c['titleURL'] = 'https://wpt.fyi'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = 'http://localhost:8090/'

# minimalistic config to activate new web UI
c['www'] = dict(port=80,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
